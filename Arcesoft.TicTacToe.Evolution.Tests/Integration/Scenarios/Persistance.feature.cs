// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Arcesoft.TicTacToe.Evolution.Tests.Integration.Scenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PersistanceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "Persistance.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Persistance", "\tVerify persistance functionality", ProgrammingLanguage.CSharp, new string[] {
                        "Integration"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Persistance")))
            {
                global::Arcesoft.TicTacToe.Evolution.Tests.Integration.Scenarios.PersistanceFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line 6
 testRunner.Given("I have a container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.Given("I have an evolution factory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.Given("I have a data access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Data access should save population")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Persistance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Integration")]
        public virtual void DataAccessShouldSavePopulation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Data access should save population", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "MutationRate",
                        "MaximumPopulationSize",
                        "IndividualChildBearingLimit",
                        "MaximumGenesPerIndividual",
                        "BreederType",
                        "FitnessEvaluatorType",
                        "MatchTournaments"});
            table1.AddRow(new string[] {
                        "0",
                        "2",
                        "5",
                        "2",
                        "ASexual",
                        "AllOrNothing",
                        "1"});
#line 11
 testRunner.Given("I have the following evolution settings", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table2.AddRow(new string[] {
                        "99000000-0000-0000-0000-000000000000"});
#line 14
 testRunner.Given("I delete the following populations", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Generation"});
            table3.AddRow(new string[] {
                        "99000000-0000-0000-0000-000000000000",
                        "Giggidy",
                        "5500"});
#line 17
 testRunner.Given("I have the following population", ((string)(null)), table3, "Given ");
#line 20
 testRunner.Given("I clear all individuals from my population", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Turn",
                        "Priority",
                        "Alleles"});
            table4.AddRow(new string[] {
                        "First",
                        "3",
                        "____R____"});
            table4.AddRow(new string[] {
                        "Ninth",
                        "34",
                        "DDDDDDDDR"});
#line 21
 testRunner.Given("I add an individual called \'Alpha\' with id \'10000000-0000-0000-0000-000000000000\'" +
                    " and with the following genes to my population", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Turn",
                        "Priority",
                        "Alleles"});
            table5.AddRow(new string[] {
                        "Second",
                        "22",
                        "__R__X___"});
            table5.AddRow(new string[] {
                        "Third",
                        "4",
                        "DDD__DDDR"});
#line 25
 testRunner.Given("I add an individual called \'Beta\' with id \'20000000-0000-0000-0000-000000000000\' " +
                    "and with the following genes to my population", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Turn",
                        "Priority",
                        "Alleles"});
            table6.AddRow(new string[] {
                        "Fourth",
                        "1",
                        "XO__R____"});
            table6.AddRow(new string[] {
                        "Eigth",
                        "20",
                        "__DDDDDDR"});
#line 29
 testRunner.Given("I add an individual called \'Gamma\' with id \'30000000-0000-0000-0000-000000000000\'" +
                    " and with the following genes to my population", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Turn",
                        "Priority",
                        "Alleles"});
            table7.AddRow(new string[] {
                        "Fourth",
                        "9",
                        "XO__R____"});
            table7.AddRow(new string[] {
                        "Eigth",
                        "20",
                        "__DDDDDDR"});
#line 33
 testRunner.Given("I add an individual called \'Cappa\' with id \'40000000-0000-0000-0000-000000000000\'" +
                    " and with the following genes to my population", ((string)(null)), table7, "Given ");
#line 37
 testRunner.Given("I save my population", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Generation"});
            table8.AddRow(new string[] {
                        "99000000-0000-0000-0000-000000000000",
                        "Giggidy",
                        "5500"});
#line 38
 testRunner.Then("I expect the saved population to contain", ((string)(null)), table8, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "MutationRate",
                        "MaximumPopulationSize",
                        "IndividualChildBearingLimit",
                        "MaximumGenesPerIndividual",
                        "BreederType",
                        "FitnessEvaluatorType",
                        "MatchTournaments"});
            table9.AddRow(new string[] {
                        "0",
                        "2",
                        "5",
                        "2",
                        "ASexual",
                        "AllOrNothing",
                        "1"});
#line 41
 testRunner.Then("I expect the saved population to contain the following evolution settings", ((string)(null)), table9, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Turn",
                        "Priority",
                        "Alleles"});
            table10.AddRow(new string[] {
                        "10000000-0000-0000-0000-000000000000",
                        "Alpha",
                        "First",
                        "3",
                        "____R____"});
            table10.AddRow(new string[] {
                        "10000000-0000-0000-0000-000000000000",
                        "Alpha",
                        "Ninth",
                        "34",
                        "DDDDDDDDR"});
            table10.AddRow(new string[] {
                        "20000000-0000-0000-0000-000000000000",
                        "Beta",
                        "Second",
                        "22",
                        "__R__X___"});
            table10.AddRow(new string[] {
                        "20000000-0000-0000-0000-000000000000",
                        "Beta",
                        "Third",
                        "4",
                        "DDD__DDDR"});
            table10.AddRow(new string[] {
                        "30000000-0000-0000-0000-000000000000",
                        "Gamma",
                        "Fourth",
                        "1",
                        "XO__R____"});
            table10.AddRow(new string[] {
                        "30000000-0000-0000-0000-000000000000",
                        "Gamma",
                        "Eigth",
                        "20",
                        "__DDDDDDR"});
            table10.AddRow(new string[] {
                        "40000000-0000-0000-0000-000000000000",
                        "Cappa",
                        "Fourth",
                        "9",
                        "XO__R____"});
            table10.AddRow(new string[] {
                        "40000000-0000-0000-0000-000000000000",
                        "Cappa",
                        "Eigth",
                        "20",
                        "__DDDDDDR"});
#line 44
 testRunner.Then("I expect the saved population to contain the following individuals", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Data access should find populations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Persistance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Integration")]
        public virtual void DataAccessShouldFindPopulations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Data access should find populations", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "MutationRate",
                        "MaximumPopulationSize",
                        "IndividualChildBearingLimit",
                        "MaximumGenesPerIndividual",
                        "BreederType",
                        "FitnessEvaluatorType",
                        "MatchTournaments"});
            table11.AddRow(new string[] {
                        "0",
                        "2",
                        "5",
                        "2",
                        "ASexual",
                        "AllOrNothing",
                        "1"});
#line 56
 testRunner.Given("I have the following evolution settings", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table12.AddRow(new string[] {
                        "10000000-0000-0000-0000-000000000000"});
            table12.AddRow(new string[] {
                        "20000000-0000-0000-0000-000000000000"});
            table12.AddRow(new string[] {
                        "30000000-0000-0000-0000-000000000000"});
            table12.AddRow(new string[] {
                        "40000000-0000-0000-0000-000000000000"});
#line 59
 testRunner.Given("I delete the following populations", ((string)(null)), table12, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table13.AddRow(new string[] {
                        "10000000-0000-0000-0000-000000000000",
                        "Giggidy"});
            table13.AddRow(new string[] {
                        "20000000-0000-0000-0000-000000000000",
                        "Giggid"});
            table13.AddRow(new string[] {
                        "30000000-0000-0000-0000-000000000000",
                        "QuagmadiusGiggidyTheThird"});
            table13.AddRow(new string[] {
                        "40000000-0000-0000-0000-000000000000",
                        "Coolio"});
#line 65
 testRunner.Given("I have the following populations", ((string)(null)), table13, "Given ");
#line 71
 testRunner.Given("I save my populations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
 testRunner.When("I find populations by name \'gIGgIDY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table14.AddRow(new string[] {
                        "10000000-0000-0000-0000-000000000000",
                        "Giggidy"});
            table14.AddRow(new string[] {
                        "30000000-0000-0000-0000-000000000000",
                        "QuagmadiusGiggidyTheThird"});
#line 73
 testRunner.Then("I expect the find populations search results to only contain", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

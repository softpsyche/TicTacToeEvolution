// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TicTacToe.Evolution.Test.Specification
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GameMatchFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GameMatch.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GameMatch", "A game match", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "GameMatch")))
            {
                TicTacToe.Evolution.Test.Specification.GameMatchFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("I have a mock evolution context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.Given("I have a breeder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should assign no points for NoResponse")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameMatch")]
        public virtual void ShouldAssignNoPointsForNoResponse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should assign no points for NoResponse", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "A"});
            table1.AddRow(new string[] {
                        "B"});
#line 10
 testRunner.Given("I have the following individuals", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move",
                        "Priority",
                        "NorthWest",
                        "Northern",
                        "NorthEast",
                        "Western",
                        "Center",
                        "Eastern",
                        "SouthWest",
                        "Southern",
                        "SouthEast"});
            table2.AddRow(new string[] {
                        "0",
                        "0",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "DontCare"});
#line 14
 testRunner.Given("I have the following genes for individual \'A\'", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move",
                        "Priority",
                        "NorthWest",
                        "Northern",
                        "NorthEast",
                        "Western",
                        "Center",
                        "Eastern",
                        "SouthWest",
                        "Southern",
                        "SouthEast"});
            table3.AddRow(new string[] {
                        "0",
                        "0",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "DontCare"});
#line 17
 testRunner.Given("I have the following genes for individual \'B\'", ((string)(null)), table3, "Given ");
#line 20
 testRunner.Given("I have a gamematch with individual \'A\' as player X and individual \'B\' as player O" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("I evaluate the game match", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("The fitness score for player \'A\' should be \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
 testRunner.Then("The fitness score for player \'B\' should be \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "",
                        ""});
            table4.AddRow(new string[] {
                        "_",
                        "_",
                        "_"});
            table4.AddRow(new string[] {
                        "_",
                        "_",
                        "_"});
            table4.AddRow(new string[] {
                        "_",
                        "_",
                        "_"});
#line 24
 testRunner.Then("The match game board should look like", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should Play a tie game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameMatch")]
        public virtual void ShouldPlayATieGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should Play a tie game", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table5.AddRow(new string[] {
                        "A"});
            table5.AddRow(new string[] {
                        "B"});
#line 31
 testRunner.Given("I have the following individuals", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move",
                        "Priority",
                        "NorthWest",
                        "Northern",
                        "NorthEast",
                        "Western",
                        "Center",
                        "Eastern",
                        "SouthWest",
                        "Southern",
                        "SouthEast"});
            table6.AddRow(new string[] {
                        "0",
                        "0",
                        "Response",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty"});
            table6.AddRow(new string[] {
                        "2",
                        "0",
                        "OccupiedX",
                        "Empty",
                        "Empty",
                        "Empty",
                        "OccupiedO",
                        "Empty",
                        "Response",
                        "Empty",
                        "Empty"});
            table6.AddRow(new string[] {
                        "4",
                        "0",
                        "OccupiedX",
                        "Empty",
                        "Empty",
                        "OccupiedO",
                        "OccupiedO",
                        "Response",
                        "OccupiedX",
                        "Empty",
                        "Empty"});
            table6.AddRow(new string[] {
                        "6",
                        "0",
                        "OccupiedX",
                        "OccupiedO",
                        "Empty",
                        "OccupiedO",
                        "OccupiedO",
                        "OccupiedX",
                        "OccupiedX",
                        "Response",
                        "Empty"});
            table6.AddRow(new string[] {
                        "8",
                        "0",
                        "OccupiedX",
                        "OccupiedO",
                        "Response",
                        "OccupiedO",
                        "OccupiedO",
                        "OccupiedX",
                        "OccupiedX",
                        "OccupiedX",
                        "OccupiedO"});
#line 35
 testRunner.Given("I have the following genes for individual \'A\'", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move",
                        "Priority",
                        "NorthWest",
                        "Northern",
                        "NorthEast",
                        "Western",
                        "Center",
                        "Eastern",
                        "SouthWest",
                        "Southern",
                        "SouthEast"});
            table7.AddRow(new string[] {
                        "1",
                        "0",
                        "OccupiedX",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Response",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty"});
            table7.AddRow(new string[] {
                        "3",
                        "0",
                        "OccupiedX",
                        "Empty",
                        "Empty",
                        "Response",
                        "OccupiedO",
                        "Empty",
                        "OccupiedX",
                        "Empty",
                        "Empty"});
            table7.AddRow(new string[] {
                        "5",
                        "0",
                        "OccupiedX",
                        "Response",
                        "Empty",
                        "OccupiedO",
                        "OccupiedO",
                        "OccupiedX",
                        "OccupiedX",
                        "Empty",
                        "Empty"});
            table7.AddRow(new string[] {
                        "7",
                        "0",
                        "OccupiedX",
                        "OccupiedO",
                        "Empty",
                        "OccupiedO",
                        "OccupiedO",
                        "OccupiedX",
                        "OccupiedX",
                        "OccupiedX",
                        "Response"});
#line 42
 testRunner.Given("I have the following genes for individual \'B\'", ((string)(null)), table7, "Given ");
#line 48
 testRunner.Given("I have a gamematch with individual \'A\' as player X and individual \'B\' as player O" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
 testRunner.When("I evaluate the game match", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
 testRunner.Then("The fitness score for player \'A\' should be \'15\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 51
 testRunner.Then("The fitness score for player \'B\' should be \'14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "X",
                        "O",
                        "X"});
            table8.AddRow(new string[] {
                        "O",
                        "O",
                        "X"});
            table8.AddRow(new string[] {
                        "X",
                        "X",
                        "O"});
#line 52
 testRunner.Then("The match game board should look like", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should Play a winning game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameMatch")]
        public virtual void ShouldPlayAWinningGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should Play a winning game", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table9.AddRow(new string[] {
                        "A"});
            table9.AddRow(new string[] {
                        "B"});
#line 59
 testRunner.Given("I have the following individuals", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move",
                        "Priority",
                        "NorthWest",
                        "Northern",
                        "NorthEast",
                        "Western",
                        "Center",
                        "Eastern",
                        "SouthWest",
                        "Southern",
                        "SouthEast"});
            table10.AddRow(new string[] {
                        "0",
                        "0",
                        "Response",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty"});
            table10.AddRow(new string[] {
                        "2",
                        "0",
                        "OccupiedX",
                        "Empty",
                        "Empty",
                        "Empty",
                        "OccupiedO",
                        "Empty",
                        "Response",
                        "Empty",
                        "Empty"});
            table10.AddRow(new string[] {
                        "4",
                        "0",
                        "OccupiedX",
                        "Empty",
                        "Empty",
                        "OccupiedO",
                        "OccupiedO",
                        "Response",
                        "OccupiedX",
                        "Empty",
                        "Empty"});
            table10.AddRow(new string[] {
                        "6",
                        "0",
                        "OccupiedX",
                        "OccupiedO",
                        "Empty",
                        "OccupiedO",
                        "OccupiedO",
                        "OccupiedX",
                        "OccupiedX",
                        "Response",
                        "Empty"});
            table10.AddRow(new string[] {
                        "8",
                        "0",
                        "OccupiedX",
                        "OccupiedO",
                        "OccupiedO",
                        "OccupiedO",
                        "OccupiedO",
                        "OccupiedX",
                        "OccupiedX",
                        "OccupiedX",
                        "Response"});
#line 63
 testRunner.Given("I have the following genes for individual \'A\'", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move",
                        "Priority",
                        "NorthWest",
                        "Northern",
                        "NorthEast",
                        "Western",
                        "Center",
                        "Eastern",
                        "SouthWest",
                        "Southern",
                        "SouthEast"});
            table11.AddRow(new string[] {
                        "1",
                        "0",
                        "OccupiedX",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Response",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty"});
            table11.AddRow(new string[] {
                        "3",
                        "0",
                        "OccupiedX",
                        "Empty",
                        "Empty",
                        "Response",
                        "OccupiedO",
                        "Empty",
                        "OccupiedX",
                        "Empty",
                        "Empty"});
            table11.AddRow(new string[] {
                        "5",
                        "0",
                        "OccupiedX",
                        "Response",
                        "Empty",
                        "OccupiedO",
                        "OccupiedO",
                        "OccupiedX",
                        "OccupiedX",
                        "Empty",
                        "Empty"});
            table11.AddRow(new string[] {
                        "7",
                        "0",
                        "OccupiedX",
                        "OccupiedO",
                        "Response",
                        "OccupiedO",
                        "OccupiedO",
                        "OccupiedX",
                        "OccupiedX",
                        "OccupiedX",
                        "Empty"});
#line 70
 testRunner.Given("I have the following genes for individual \'B\'", ((string)(null)), table11, "Given ");
#line 76
 testRunner.Given("I have a gamematch with individual \'A\' as player X and individual \'B\' as player O" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 77
 testRunner.When("I evaluate the game match", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
 testRunner.Then("The fitness score for player \'A\' should be \'105\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
 testRunner.Then("The fitness score for player \'B\' should be \'6\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "",
                        ""});
            table12.AddRow(new string[] {
                        "X",
                        "O",
                        "O"});
            table12.AddRow(new string[] {
                        "O",
                        "O",
                        "X"});
            table12.AddRow(new string[] {
                        "X",
                        "X",
                        "X"});
#line 80
 testRunner.Then("The match game board should look like", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should Respect priority")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameMatch")]
        public virtual void ShouldRespectPriority()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should Respect priority", ((string[])(null)));
#line 86
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table13.AddRow(new string[] {
                        "A"});
            table13.AddRow(new string[] {
                        "B"});
#line 87
 testRunner.Given("I have the following individuals", ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move",
                        "Priority",
                        "NorthWest",
                        "Northern",
                        "NorthEast",
                        "Western",
                        "Center",
                        "Eastern",
                        "SouthWest",
                        "Southern",
                        "SouthEast"});
            table14.AddRow(new string[] {
                        "0",
                        "2",
                        "Response",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty"});
            table14.AddRow(new string[] {
                        "0",
                        "1",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Response",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty"});
#line 91
 testRunner.Given("I have the following genes for individual \'A\'", ((string)(null)), table14, "Given ");
#line 95
 testRunner.Given("I have a gamematch with individual \'A\' as player X and individual \'B\' as player O" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 96
 testRunner.When("I evaluate the game match", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.Then("The fitness score for player \'A\' should be \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 98
 testRunner.Then("The fitness score for player \'B\' should be \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "_",
                        "_",
                        "_"});
            table15.AddRow(new string[] {
                        "_",
                        "X",
                        "_"});
            table15.AddRow(new string[] {
                        "_",
                        "_",
                        "_"});
#line 99
 testRunner.Then("The match game board should look like", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should Use first response")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameMatch")]
        public virtual void ShouldUseFirstResponse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should Use first response", ((string[])(null)));
#line 105
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table16.AddRow(new string[] {
                        "A"});
            table16.AddRow(new string[] {
                        "B"});
#line 106
 testRunner.Given("I have the following individuals", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move",
                        "Priority",
                        "NorthWest",
                        "Northern",
                        "NorthEast",
                        "Western",
                        "Center",
                        "Eastern",
                        "SouthWest",
                        "Southern",
                        "SouthEast"});
            table17.AddRow(new string[] {
                        "0",
                        "0",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Response",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Response"});
#line 110
 testRunner.Given("I have the following genes for individual \'A\'", ((string)(null)), table17, "Given ");
#line 113
 testRunner.Given("I have a gamematch with individual \'A\' as player X and individual \'B\' as player O" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 114
 testRunner.When("I evaluate the game match", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
 testRunner.Then("The fitness score for player \'A\' should be \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 116
 testRunner.Then("The fitness score for player \'B\' should be \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "",
                        ""});
            table18.AddRow(new string[] {
                        "_",
                        "_",
                        "_"});
            table18.AddRow(new string[] {
                        "_",
                        "X",
                        "_"});
            table18.AddRow(new string[] {
                        "_",
                        "_",
                        "_"});
#line 117
 testRunner.Then("The match game board should look like", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should Ignore states for DontCare")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameMatch")]
        public virtual void ShouldIgnoreStatesForDontCare()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should Ignore states for DontCare", ((string[])(null)));
#line 123
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table19.AddRow(new string[] {
                        "A"});
            table19.AddRow(new string[] {
                        "B"});
#line 124
 testRunner.Given("I have the following individuals", ((string)(null)), table19, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move",
                        "Priority",
                        "NorthWest",
                        "Northern",
                        "NorthEast",
                        "Western",
                        "Center",
                        "Eastern",
                        "SouthWest",
                        "Southern",
                        "SouthEast"});
            table20.AddRow(new string[] {
                        "0",
                        "0",
                        "Response",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty",
                        "Empty"});
            table20.AddRow(new string[] {
                        "2",
                        "0",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "Response",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "Response"});
#line 128
 testRunner.Given("I have the following genes for individual \'A\'", ((string)(null)), table20, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move",
                        "Priority",
                        "NorthWest",
                        "Northern",
                        "NorthEast",
                        "Western",
                        "Center",
                        "Eastern",
                        "SouthWest",
                        "Southern",
                        "SouthEast"});
            table21.AddRow(new string[] {
                        "1",
                        "0",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "DontCare",
                        "Response",
                        "DontCare",
                        "DontCare",
                        "DontCare"});
#line 132
 testRunner.Given("I have the following genes for individual \'B\'", ((string)(null)), table21, "Given ");
#line 135
 testRunner.Given("I have a gamematch with individual \'A\' as player X and individual \'B\' as player O" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 136
 testRunner.When("I evaluate the game match", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 137
 testRunner.Then("The fitness score for player \'A\' should be \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 138
 testRunner.Then("The fitness score for player \'B\' should be \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "",
                        ""});
            table22.AddRow(new string[] {
                        "X",
                        "_",
                        "_"});
            table22.AddRow(new string[] {
                        "X",
                        "_",
                        "O"});
            table22.AddRow(new string[] {
                        "_",
                        "_",
                        "_"});
#line 139
 testRunner.Then("The match game board should look like", ((string)(null)), table22, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

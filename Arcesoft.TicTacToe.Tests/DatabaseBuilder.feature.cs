// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Arcesoft.TicTacToe.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DatabaseBuilderFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DatabaseBuilder.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DatabaseBuilder", "Verify building game database works correctly", ProgrammingLanguage.CSharp, new string[] {
                        "BetterTestingApproach",
                        "Unit"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "DatabaseBuilder")))
            {
                Arcesoft.TicTacToe.Tests.DatabaseBuilderFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("I have a container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.Given("I mock the ILiteDatabase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.Given("I have a tictactoe factory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database builder should populate move responses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DatabaseBuilder")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void DatabaseBuilderShouldPopulateMoveResponses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Database builder should populate move responses", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C"});
            table1.AddRow(new string[] {
                        "X",
                        "",
                        "O"});
            table1.AddRow(new string[] {
                        "O",
                        "X",
                        ""});
            table1.AddRow(new string[] {
                        "X",
                        "",
                        "O"});
#line 12
 testRunner.Given("I start a new game in the following state", ((string)(null)), table1, "Given ");
#line 17
 testRunner.Given("I have a database builder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.When("I populate move responses for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then("I expect the ILiteDatabase.DeleteCollection to have been called \'1\' times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
 testRunner.Then("I expect the ILiteDatabase.EnsureIndex to have been called with the following \'Id" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Board",
                        "Player",
                        "Response",
                        "Outcome",
                        "Id"});
            table2.AddRow(new string[] {
                        "XXOOX_X_O",
                        "O",
                        "Eastern",
                        "OWin",
                        "XXOOX_X_OOEastern"});
            table2.AddRow(new string[] {
                        "XXOOX_XOO",
                        "X",
                        "Eastern",
                        "Tie",
                        "XXOOX_XOOXEastern"});
            table2.AddRow(new string[] {
                        "XXOOX_X_O",
                        "O",
                        "Southern",
                        "Tie",
                        "XXOOX_X_OOSouthern"});
            table2.AddRow(new string[] {
                        "X_OOX_X_O",
                        "X",
                        "Northern",
                        "OWin",
                        "X_OOX_X_OXNorthern"});
            table2.AddRow(new string[] {
                        "XOOOXXX_O",
                        "X",
                        "Southern",
                        "Tie",
                        "XOOOXXX_OXSouthern"});
            table2.AddRow(new string[] {
                        "X_OOXXX_O",
                        "O",
                        "Northern",
                        "Tie",
                        "X_OOXXX_OONorthern"});
            table2.AddRow(new string[] {
                        "X_OOXXXOO",
                        "X",
                        "Northern",
                        "Tie",
                        "X_OOXXXOOXNorthern"});
            table2.AddRow(new string[] {
                        "X_OOXXX_O",
                        "O",
                        "Southern",
                        "Tie",
                        "X_OOXXX_OOSouthern"});
            table2.AddRow(new string[] {
                        "X_OOX_X_O",
                        "X",
                        "Eastern",
                        "Tie",
                        "X_OOX_X_OXEastern"});
            table2.AddRow(new string[] {
                        "XOOOX_XXO",
                        "X",
                        "Eastern",
                        "Tie",
                        "XOOOX_XXOXEastern"});
            table2.AddRow(new string[] {
                        "X_OOX_XXO",
                        "O",
                        "Northern",
                        "Tie",
                        "X_OOX_XXOONorthern"});
            table2.AddRow(new string[] {
                        "X_OOX_XXO",
                        "O",
                        "Eastern",
                        "OWin",
                        "X_OOX_XXOOEastern"});
            table2.AddRow(new string[] {
                        "X_OOX_X_O",
                        "X",
                        "Southern",
                        "OWin",
                        "X_OOX_X_OXSouthern"});
#line 21
 testRunner.Then("I expect the ILiteDatabase.InsertBulk to have been called with the following move" +
                    " response records", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database builder should populate move responses 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DatabaseBuilder")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void DatabaseBuilderShouldPopulateMoveResponses2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Database builder should populate move responses 2", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C"});
            table3.AddRow(new string[] {
                        "X",
                        "",
                        "O"});
            table3.AddRow(new string[] {
                        "",
                        "X",
                        ""});
            table3.AddRow(new string[] {
                        "X",
                        "O",
                        "O"});
#line 38
 testRunner.Given("I start a new game in the following state", ((string)(null)), table3, "Given ");
#line 43
 testRunner.Given("I have a database builder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.When("I populate move responses for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then("I expect the ILiteDatabase.DeleteCollection to have been called \'1\' times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
 testRunner.Then("I expect the ILiteDatabase.EnsureIndex to have been called with the following \'Id" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Board",
                        "Player",
                        "Response",
                        "Outcome",
                        "Id"});
            table4.AddRow(new string[] {
                        "XXOOX_XOO",
                        "X",
                        "Eastern",
                        "Tie",
                        "XXOOX_XOOXEastern"});
            table4.AddRow(new string[] {
                        "XXO_X_XOO",
                        "O",
                        "Western",
                        "Tie",
                        "XXO_X_XOOOWestern"});
            table4.AddRow(new string[] {
                        "XXO_X_XOO",
                        "O",
                        "Eastern",
                        "OWin",
                        "XXO_X_XOOOEastern"});
            table4.AddRow(new string[] {
                        "X_O_X_XOO",
                        "X",
                        "Northern",
                        "OWin",
                        "X_O_X_XOOXNorthern"});
            table4.AddRow(new string[] {
                        "X_O_X_XOO",
                        "X",
                        "Western",
                        "XWin",
                        "X_O_X_XOOXWestern"});
            table4.AddRow(new string[] {
                        "XOO_XXXOO",
                        "X",
                        "Western",
                        "XWin",
                        "XOO_XXXOOXWestern"});
            table4.AddRow(new string[] {
                        "X_O_XXXOO",
                        "O",
                        "Northern",
                        "XWin",
                        "X_O_XXXOOONorthern"});
            table4.AddRow(new string[] {
                        "X_OOXXXOO",
                        "X",
                        "Northern",
                        "Tie",
                        "X_OOXXXOOXNorthern"});
            table4.AddRow(new string[] {
                        "X_O_XXXOO",
                        "O",
                        "Western",
                        "Tie",
                        "X_O_XXXOOOWestern"});
            table4.AddRow(new string[] {
                        "X_O_X_XOO",
                        "X",
                        "Eastern",
                        "Tie",
                        "X_O_X_XOOXEastern"});
#line 47
 testRunner.Then("I expect the ILiteDatabase.InsertBulk to have been called with the following move" +
                    " response records", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

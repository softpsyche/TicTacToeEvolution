// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Arcesoft.TicTacToe.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GameFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Game.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Game", "Verify that the tic tac toe game follows the domain specifications", ProgrammingLanguage.CSharp, new string[] {
                        "BetterTestingApproach",
                        "Unit"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Game")))
            {
                Arcesoft.TicTacToe.Tests.GameFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("I have a container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.Given("I have a tictactoe factory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("New game should start in the correct state")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void NewGameShouldStartInTheCorrectState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New game should start in the correct state", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 11
 testRunner.When("I start a new game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("The current player should be \'X\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
 testRunner.Then("The move history should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
 testRunner.Then("The game state should be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
 testRunner.Then("The game should not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
 testRunner.Then("The total moves made should be \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C"});
            table1.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 17
 testRunner.Then("The game board should look like", ((string)(null)), table1, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table2.AddRow(new string[] {
                        "NorthWest"});
            table2.AddRow(new string[] {
                        "Northern"});
            table2.AddRow(new string[] {
                        "NorthEast"});
            table2.AddRow(new string[] {
                        "Western"});
            table2.AddRow(new string[] {
                        "Center"});
            table2.AddRow(new string[] {
                        "Eastern"});
            table2.AddRow(new string[] {
                        "SouthWest"});
            table2.AddRow(new string[] {
                        "Southern"});
            table2.AddRow(new string[] {
                        "SouthEast"});
#line 22
 testRunner.Then("The available legal moves should be", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("New game with moves should start in correct state")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void NewGameWithMovesShouldStartInCorrectState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New game with moves should start in correct state", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table3.AddRow(new string[] {
                        "Center"});
            table3.AddRow(new string[] {
                        "Southern"});
            table3.AddRow(new string[] {
                        "Eastern"});
#line 35
 testRunner.When("I start a new game with the following moves", ((string)(null)), table3, "When ");
#line 40
 testRunner.Then("The current player should be \'O\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table4.AddRow(new string[] {
                        "Center"});
            table4.AddRow(new string[] {
                        "Southern"});
            table4.AddRow(new string[] {
                        "Eastern"});
#line 41
 testRunner.Then("The move history should be", ((string)(null)), table4, "Then ");
#line 46
 testRunner.Then("The game state should be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
 testRunner.Then("The game should not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
 testRunner.Then("The total moves made should be \'3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C"});
            table5.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table5.AddRow(new string[] {
                        "",
                        "X",
                        "X"});
            table5.AddRow(new string[] {
                        "",
                        "O",
                        ""});
#line 49
 testRunner.Then("The game board should look like", ((string)(null)), table5, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table6.AddRow(new string[] {
                        "NorthWest"});
            table6.AddRow(new string[] {
                        "Northern"});
            table6.AddRow(new string[] {
                        "NorthEast"});
            table6.AddRow(new string[] {
                        "Western"});
            table6.AddRow(new string[] {
                        "SouthWest"});
            table6.AddRow(new string[] {
                        "SouthEast"});
#line 54
 testRunner.Then("The available legal moves should be", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void NewGameWithMovesShouldThrowIf(string testName, string moves, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New game with moves should throw if", exampleTags);
#line 63
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 64
 testRunner.Given("I expect an exception to be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
 testRunner.When(string.Format("I start a new game with the following moves \'{0}\'", moves), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table7.AddRow(new string[] {
                        "Invalid move passed in. Cannot create game from moves."});
#line 66
 testRunner.Then("I expect the following GameException to be thrown", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("New game with moves should throw if")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "the moves has duplicates")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "the moves has duplicates")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Moves", "Center,Southern,Center")]
        public virtual void NewGameWithMovesShouldThrowIf_TheMovesHasDuplicates()
        {
            this.NewGameWithMovesShouldThrowIf("the moves has duplicates", "Center,Southern,Center", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("New game with moves should throw if")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "the moves are invalid due to game being over")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "the moves are invalid due to game being over")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Moves", "Center,SouthWest,Southern,SouthEast,Northern,Eastern")]
        public virtual void NewGameWithMovesShouldThrowIf_TheMovesAreInvalidDueToGameBeingOver()
        {
            this.NewGameWithMovesShouldThrowIf("the moves are invalid due to game being over", "Center,SouthWest,Southern,SouthEast,Northern,Eastern", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("New game with moves should throw if")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "the moves are too many")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "the moves are too many")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Moves", "Center,SouthWest,Eastern,Western,NorthWest,SouthEast,Southern,Northern,NorthEast," +
            "Center")]
        public virtual void NewGameWithMovesShouldThrowIf_TheMovesAreTooMany()
        {
            this.NewGameWithMovesShouldThrowIf("the moves are too many", "Center,SouthWest,Eastern,Western,NorthWest,SouthEast,Southern,Northern,NorthEast," +
                    "Center", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should detect tie")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void GameShouldDetectTie()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Game should detect tie", ((string[])(null)));
#line 75
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table8.AddRow(new string[] {
                        "Center"});
            table8.AddRow(new string[] {
                        "SouthWest"});
            table8.AddRow(new string[] {
                        "NorthWest"});
            table8.AddRow(new string[] {
                        "SouthEast"});
            table8.AddRow(new string[] {
                        "Southern"});
            table8.AddRow(new string[] {
                        "Northern"});
            table8.AddRow(new string[] {
                        "Western"});
            table8.AddRow(new string[] {
                        "Eastern"});
#line 76
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table8, "Given ");
#line 86
 testRunner.When("I make the move \'NorthEast\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table9.AddRow(new string[] {
                        "Center"});
            table9.AddRow(new string[] {
                        "SouthWest"});
            table9.AddRow(new string[] {
                        "NorthWest"});
            table9.AddRow(new string[] {
                        "SouthEast"});
            table9.AddRow(new string[] {
                        "Southern"});
            table9.AddRow(new string[] {
                        "Northern"});
            table9.AddRow(new string[] {
                        "Western"});
            table9.AddRow(new string[] {
                        "Eastern"});
            table9.AddRow(new string[] {
                        "NorthEast"});
#line 87
 testRunner.Then("The move history should be", ((string)(null)), table9, "Then ");
#line 98
 testRunner.Then("The game state should be \'Tie\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 99
 testRunner.Then("The game should be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 100
 testRunner.Then("The total moves made should be \'9\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C"});
            table10.AddRow(new string[] {
                        "X",
                        "O",
                        "X"});
            table10.AddRow(new string[] {
                        "X",
                        "X",
                        "O"});
            table10.AddRow(new string[] {
                        "O",
                        "X",
                        "O"});
#line 101
 testRunner.Then("The game board should look like", ((string)(null)), table10, "Then ");
#line 106
 testRunner.Then("The available legal moves should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should detect \'X\' win for western column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void GameShouldDetectXWinForWesternColumn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Game should detect \'X\' win for western column", ((string[])(null)));
#line 108
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table11.AddRow(new string[] {
                        "NorthWest"});
            table11.AddRow(new string[] {
                        "Center"});
            table11.AddRow(new string[] {
                        "Western"});
            table11.AddRow(new string[] {
                        "Southern"});
#line 109
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table11, "Given ");
#line 115
 testRunner.When("I make the move \'SouthWest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table12.AddRow(new string[] {
                        "NorthWest"});
            table12.AddRow(new string[] {
                        "Center"});
            table12.AddRow(new string[] {
                        "Western"});
            table12.AddRow(new string[] {
                        "Southern"});
            table12.AddRow(new string[] {
                        "SouthWest"});
#line 116
 testRunner.Then("The move history should be", ((string)(null)), table12, "Then ");
#line 123
 testRunner.Then("The game state should be \'XWin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 124
 testRunner.Then("The game should be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 125
 testRunner.Then("The total moves made should be \'5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C"});
            table13.AddRow(new string[] {
                        "X",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "X",
                        "O",
                        ""});
            table13.AddRow(new string[] {
                        "X",
                        "O",
                        ""});
#line 126
 testRunner.Then("The game board should look like", ((string)(null)), table13, "Then ");
#line 131
 testRunner.Then("The available legal moves should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should detect \'X\' win for center column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void GameShouldDetectXWinForCenterColumn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Game should detect \'X\' win for center column", ((string[])(null)));
#line 133
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table14.AddRow(new string[] {
                        "Center"});
            table14.AddRow(new string[] {
                        "SouthWest"});
            table14.AddRow(new string[] {
                        "Northern"});
            table14.AddRow(new string[] {
                        "Western"});
#line 134
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table14, "Given ");
#line 140
 testRunner.When("I make the move \'Southern\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table15.AddRow(new string[] {
                        "Center"});
            table15.AddRow(new string[] {
                        "SouthWest"});
            table15.AddRow(new string[] {
                        "Northern"});
            table15.AddRow(new string[] {
                        "Western"});
            table15.AddRow(new string[] {
                        "Southern"});
#line 141
 testRunner.Then("The move history should be", ((string)(null)), table15, "Then ");
#line 148
 testRunner.Then("The game state should be \'XWin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 149
 testRunner.Then("The game should be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 150
 testRunner.Then("The total moves made should be \'5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C"});
            table16.AddRow(new string[] {
                        "",
                        "X",
                        ""});
            table16.AddRow(new string[] {
                        "O",
                        "X",
                        ""});
            table16.AddRow(new string[] {
                        "O",
                        "X",
                        ""});
#line 151
 testRunner.Then("The game board should look like", ((string)(null)), table16, "Then ");
#line 156
 testRunner.Then("The available legal moves should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should detect \'X\' win for eastern column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void GameShouldDetectXWinForEasternColumn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Game should detect \'X\' win for eastern column", ((string[])(null)));
#line 158
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table17.AddRow(new string[] {
                        "NorthEast"});
            table17.AddRow(new string[] {
                        "Center"});
            table17.AddRow(new string[] {
                        "Eastern"});
            table17.AddRow(new string[] {
                        "Southern"});
#line 159
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table17, "Given ");
#line 165
 testRunner.When("I make the move \'SouthEast\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table18.AddRow(new string[] {
                        "NorthEast"});
            table18.AddRow(new string[] {
                        "Center"});
            table18.AddRow(new string[] {
                        "Eastern"});
            table18.AddRow(new string[] {
                        "Southern"});
            table18.AddRow(new string[] {
                        "SouthEast"});
#line 166
 testRunner.Then("The move history should be", ((string)(null)), table18, "Then ");
#line 173
 testRunner.Then("The game state should be \'XWin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 174
 testRunner.Then("The game should be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 175
 testRunner.Then("The total moves made should be \'5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C"});
            table19.AddRow(new string[] {
                        "",
                        "",
                        "X"});
            table19.AddRow(new string[] {
                        "",
                        "O",
                        "X"});
            table19.AddRow(new string[] {
                        "",
                        "O",
                        "X"});
#line 176
 testRunner.Then("The game board should look like", ((string)(null)), table19, "Then ");
#line 181
 testRunner.Then("The available legal moves should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should detect \'X\' win for diagonal slope")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void GameShouldDetectXWinForDiagonalSlope()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Game should detect \'X\' win for diagonal slope", ((string[])(null)));
#line 183
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table20.AddRow(new string[] {
                        "NorthWest"});
            table20.AddRow(new string[] {
                        "Western"});
            table20.AddRow(new string[] {
                        "Center"});
            table20.AddRow(new string[] {
                        "Eastern"});
#line 184
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table20, "Given ");
#line 190
 testRunner.When("I make the move \'SouthEast\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table21.AddRow(new string[] {
                        "NorthWest"});
            table21.AddRow(new string[] {
                        "Western"});
            table21.AddRow(new string[] {
                        "Center"});
            table21.AddRow(new string[] {
                        "Eastern"});
            table21.AddRow(new string[] {
                        "SouthEast"});
#line 191
 testRunner.Then("The move history should be", ((string)(null)), table21, "Then ");
#line 198
 testRunner.Then("The game state should be \'XWin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 199
 testRunner.Then("The game should be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 200
 testRunner.Then("The total moves made should be \'5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C"});
            table22.AddRow(new string[] {
                        "X",
                        "",
                        ""});
            table22.AddRow(new string[] {
                        "O",
                        "X",
                        "O"});
            table22.AddRow(new string[] {
                        "",
                        "",
                        "X"});
#line 201
 testRunner.Then("The game board should look like", ((string)(null)), table22, "Then ");
#line 206
 testRunner.Then("The available legal moves should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should detect \'X\' win for diagonal grade")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void GameShouldDetectXWinForDiagonalGrade()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Game should detect \'X\' win for diagonal grade", ((string[])(null)));
#line 209
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 210
 testRunner.Given("Todo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 211
 testRunner.When("Todo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 212
 testRunner.Then("Todo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void GameShouldDetectOWinFor(string testName, string initialMoves, string move, string expectedMoveHistory, string expectedGameBoard, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Game should detect \'O\' win for", exampleTags);
#line 215
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 216
 testRunner.Given(string.Format("I start a new game with the following moves \'{0}\'", initialMoves), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 217
 testRunner.When(string.Format("I make the move \'{0}\'", move), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 218
 testRunner.Then(string.Format("The move history should be \'{0}\'", expectedMoveHistory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 219
 testRunner.Then("The game state should be \'OWin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 220
 testRunner.Then("The game should be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 221
 testRunner.Then("The total moves made should be \'6\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 222
 testRunner.Then(string.Format("The game board should be \'{0}\'", expectedGameBoard), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should detect \'O\' win for")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "western column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "western column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Center,Western,Southern,SouthWest,Eastern")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Move", "NorthWest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoveHistory", "Center,Western,Southern,SouthWest,Eastern,NorthWest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedGameBoard", "O__OXXOX_")]
        public virtual void GameShouldDetectOWinFor_WesternColumn()
        {
            this.GameShouldDetectOWinFor("western column", "Center,Western,Southern,SouthWest,Eastern", "NorthWest", "Center,Western,Southern,SouthWest,Eastern,NorthWest", "O__OXXOX_", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should detect \'O\' win for")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "center column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "center column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Western,Northern,SouthWest,Center,Eastern")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Move", "Southern")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoveHistory", "Western,Northern,SouthWest,Center,Eastern,Southern")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedGameBoard", "_O_XOXXO_")]
        public virtual void GameShouldDetectOWinFor_CenterColumn()
        {
            this.GameShouldDetectOWinFor("center column", "Western,Northern,SouthWest,Center,Eastern", "Southern", "Western,Northern,SouthWest,Center,Eastern,Southern", "_O_XOXXO_", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should detect \'O\' win for")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "eastern column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "eastern column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Center,Eastern,Southern,SouthEast,Western")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Move", "NorthEast")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoveHistory", "Center,Eastern,Southern,SouthEast,Western,NorthEast")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedGameBoard", "__OXXO_XO")]
        public virtual void GameShouldDetectOWinFor_EasternColumn()
        {
            this.GameShouldDetectOWinFor("eastern column", "Center,Eastern,Southern,SouthEast,Western", "NorthEast", "Center,Eastern,Southern,SouthEast,Western,NorthEast", "__OXXO_XO", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should detect \'O\' win for")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "diagonal slope")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "diagonal slope")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Northern,NorthWest,Southern,Center,Western")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Move", "SouthEast")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoveHistory", "Northern,NorthWest,Southern,Center,Western,SouthEast")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedGameBoard", "OX_XO__XO")]
        public virtual void GameShouldDetectOWinFor_DiagonalSlope()
        {
            this.GameShouldDetectOWinFor("diagonal slope", "Northern,NorthWest,Southern,Center,Western", "SouthEast", "Northern,NorthWest,Southern,Center,Western,SouthEast", "OX_XO__XO", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should detect \'O\' win for")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "diagonal grade")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "diagonal grade")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Northern,SouthWest,Southern,Center,Western")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Move", "NorthEast")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoveHistory", "Northern,SouthWest,Southern,Center,Western,NorthEast")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedGameBoard", "_XOXO_OX_")]
        public virtual void GameShouldDetectOWinFor_DiagonalGrade()
        {
            this.GameShouldDetectOWinFor("diagonal grade", "Northern,SouthWest,Southern,Center,Western", "NorthEast", "Northern,SouthWest,Southern,Center,Western,NorthEast", "_XOXO_OX_", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should reset correctly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void GameShouldResetCorrectly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Game should reset correctly", ((string[])(null)));
#line 231
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table23.AddRow(new string[] {
                        "Center"});
            table23.AddRow(new string[] {
                        "Southern"});
            table23.AddRow(new string[] {
                        "Eastern"});
#line 232
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table23, "Given ");
#line 237
 testRunner.When("I reset the game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 238
 testRunner.Then("The current player should be \'X\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 239
 testRunner.Then("The move history should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 240
 testRunner.Then("The game state should be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 241
 testRunner.Then("The game should not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 242
 testRunner.Then("The total moves made should be \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C"});
            table24.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 243
 testRunner.Then("The game board should look like", ((string)(null)), table24, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table25.AddRow(new string[] {
                        "NorthWest"});
            table25.AddRow(new string[] {
                        "Northern"});
            table25.AddRow(new string[] {
                        "NorthEast"});
            table25.AddRow(new string[] {
                        "Western"});
            table25.AddRow(new string[] {
                        "Center"});
            table25.AddRow(new string[] {
                        "Eastern"});
            table25.AddRow(new string[] {
                        "SouthWest"});
            table25.AddRow(new string[] {
                        "Southern"});
            table25.AddRow(new string[] {
                        "SouthEast"});
#line 248
 testRunner.Then("The available legal moves should be", ((string)(null)), table25, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should undo move correctly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void GameShouldUndoMoveCorrectly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Game should undo move correctly", ((string[])(null)));
#line 260
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table26.AddRow(new string[] {
                        "Northern"});
            table26.AddRow(new string[] {
                        "Western"});
            table26.AddRow(new string[] {
                        "Center"});
            table26.AddRow(new string[] {
                        "Eastern"});
#line 261
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table26, "Given ");
#line 267
 testRunner.Given("I make the move \'Southern\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 268
 testRunner.When("I undo last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 269
 testRunner.Then("The current player should be \'X\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table27.AddRow(new string[] {
                        "Northern"});
            table27.AddRow(new string[] {
                        "Western"});
            table27.AddRow(new string[] {
                        "Center"});
            table27.AddRow(new string[] {
                        "Eastern"});
#line 270
 testRunner.Then("The move history should be", ((string)(null)), table27, "Then ");
#line 276
 testRunner.Then("The game state should be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 277
 testRunner.Then("The game should not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 278
 testRunner.Then("The total moves made should be \'4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C"});
            table28.AddRow(new string[] {
                        "",
                        "X",
                        ""});
            table28.AddRow(new string[] {
                        "O",
                        "X",
                        "O"});
            table28.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 279
 testRunner.Then("The game board should look like", ((string)(null)), table28, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table29.AddRow(new string[] {
                        "NorthWest"});
            table29.AddRow(new string[] {
                        "NorthEast"});
            table29.AddRow(new string[] {
                        "SouthWest"});
            table29.AddRow(new string[] {
                        "Southern"});
            table29.AddRow(new string[] {
                        "SouthEast"});
#line 284
 testRunner.Then("The available legal moves should be", ((string)(null)), table29, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should raise game change event for move correctly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void GameShouldRaiseGameChangeEventForMoveCorrectly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Game should raise game change event for move correctly", ((string[])(null)));
#line 293
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 294
 testRunner.Given("I start a new game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 295
 testRunner.Given("I start listening to all game events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 296
 testRunner.When("I make the move \'Center\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "GameChange",
                        "GameState",
                        "CurrentPlayer"});
            table30.AddRow(new string[] {
                        "Move",
                        "InPlay",
                        "O"});
#line 297
 testRunner.Then("The following game state changed events are raised", ((string)(null)), table30, "Then ");
#line 300
 testRunner.Then("The following number of GameOver events are raised: \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 301
 testRunner.Then("The following number of GameReset events are raised: \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should raise game change event for win correctly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void GameShouldRaiseGameChangeEventForWinCorrectly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Game should raise game change event for win correctly", ((string[])(null)));
#line 303
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table31.AddRow(new string[] {
                        "Northern"});
            table31.AddRow(new string[] {
                        "Western"});
            table31.AddRow(new string[] {
                        "Southern"});
            table31.AddRow(new string[] {
                        "Eastern"});
#line 304
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table31, "Given ");
#line 310
 testRunner.Given("I start listening to all game events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 311
 testRunner.When("I make the move \'Center\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "GameChange",
                        "GameState",
                        "CurrentPlayer"});
            table32.AddRow(new string[] {
                        "Over",
                        "XWin",
                        "O"});
#line 312
 testRunner.Then("The following game state changed events are raised", ((string)(null)), table32, "Then ");
#line 315
 testRunner.Then("The following number of GameOver events are raised: \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 316
 testRunner.Then("The following number of GameReset events are raised: \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should raise game change event for reset correctly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void GameShouldRaiseGameChangeEventForResetCorrectly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Game should raise game change event for reset correctly", ((string[])(null)));
#line 318
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table33.AddRow(new string[] {
                        "Northern"});
            table33.AddRow(new string[] {
                        "Western"});
            table33.AddRow(new string[] {
                        "Southern"});
            table33.AddRow(new string[] {
                        "Eastern"});
#line 319
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table33, "Given ");
#line 325
 testRunner.Given("I start listening to all game events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 326
 testRunner.When("I reset the game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "GameChange",
                        "GameState",
                        "CurrentPlayer"});
            table34.AddRow(new string[] {
                        "Reset",
                        "InPlay",
                        "X"});
#line 327
 testRunner.Then("The following game state changed events are raised", ((string)(null)), table34, "Then ");
#line 330
 testRunner.Then("The following number of GameOver events are raised: \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 331
 testRunner.Then("The following number of GameReset events are raised: \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Game should raise game change event for undomove correctly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Game")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void GameShouldRaiseGameChangeEventForUndomoveCorrectly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Game should raise game change event for undomove correctly", ((string[])(null)));
#line 333
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table35.AddRow(new string[] {
                        "Northern"});
            table35.AddRow(new string[] {
                        "Western"});
            table35.AddRow(new string[] {
                        "Southern"});
            table35.AddRow(new string[] {
                        "Eastern"});
#line 334
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table35, "Given ");
#line 340
 testRunner.Given("I start listening to all game events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 341
 testRunner.When("I undo last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "GameChange",
                        "GameState",
                        "CurrentPlayer"});
            table36.AddRow(new string[] {
                        "UndoMove",
                        "InPlay",
                        "O"});
#line 342
 testRunner.Then("The following game state changed events are raised", ((string)(null)), table36, "Then ");
#line 345
 testRunner.Then("The following number of GameOver events are raised: \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 346
 testRunner.Then("The following number of GameReset events are raised: \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

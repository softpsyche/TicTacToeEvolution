// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Arcesoft.TicTacToe.Tests.ArtificialIntelligence
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BruteForceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "BruteForce.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BruteForce", "\tVerify that the brute force artificial intelligence works correctly", ProgrammingLanguage.CSharp, new string[] {
                        "Behavioral"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "BruteForce")))
            {
                global::Arcesoft.TicTacToe.Tests.ArtificialIntelligence.BruteForceFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line 6
 testRunner.Given("I have a container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.Given("I have a tictactoe factory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.Given("I have the artificial intelligence \'BruteForce\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Brute force AI should find no moves if game is already over")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Behavioral")]
        public virtual void BruteForceAIShouldFindNoMovesIfGameIsAlreadyOver()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Brute force AI should find no moves if game is already over", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table1.AddRow(new string[] {
                        "Northern"});
            table1.AddRow(new string[] {
                        "Eastern"});
            table1.AddRow(new string[] {
                        "Center"});
            table1.AddRow(new string[] {
                        "Western"});
            table1.AddRow(new string[] {
                        "Southern"});
#line 12
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table1, "Given ");
#line 19
 testRunner.Given("I expect an exception to be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.When("I have the AI find move results for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("The move results should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Brute force AI should find tie move results for game as player X")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Behavioral")]
        public virtual void BruteForceAIShouldFindTieMoveResultsForGameAsPlayerX()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Brute force AI should find tie move results for game as player X", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 30
 testRunner.Given("I start a new game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.When("I have the AI find move results for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "MoveMade",
                        "GameStateAfterMove"});
            table2.AddRow(new string[] {
                        "NorthWest",
                        "Tie"});
            table2.AddRow(new string[] {
                        "Northern",
                        "Tie"});
            table2.AddRow(new string[] {
                        "NorthEast",
                        "Tie"});
            table2.AddRow(new string[] {
                        "Western",
                        "Tie"});
            table2.AddRow(new string[] {
                        "Center",
                        "Tie"});
            table2.AddRow(new string[] {
                        "Eastern",
                        "Tie"});
            table2.AddRow(new string[] {
                        "SouthWest",
                        "Tie"});
            table2.AddRow(new string[] {
                        "Southern",
                        "Tie"});
            table2.AddRow(new string[] {
                        "SouthEast",
                        "Tie"});
#line 32
 testRunner.Then("The move results should contain the following", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Brute force AI should find winning move results for game as player X when Os firs" +
            "t move is western")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Behavioral")]
        public virtual void BruteForceAIShouldFindWinningMoveResultsForGameAsPlayerXWhenOsFirstMoveIsWestern()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Brute force AI should find winning move results for game as player X when Os firs" +
                    "t move is western", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table3.AddRow(new string[] {
                        "Center"});
            table3.AddRow(new string[] {
                        "Western"});
            table3.AddRow(new string[] {
                        "NorthWest"});
            table3.AddRow(new string[] {
                        "SouthEast"});
#line 45
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table3, "Given ");
#line 51
 testRunner.When("I have the AI find move results for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "MoveMade",
                        "GameStateAfterMove"});
            table4.AddRow(new string[] {
                        "Northern",
                        "XWin"});
            table4.AddRow(new string[] {
                        "NorthEast",
                        "XWin"});
            table4.AddRow(new string[] {
                        "Eastern",
                        "Tie"});
            table4.AddRow(new string[] {
                        "SouthWest",
                        "Tie"});
            table4.AddRow(new string[] {
                        "Southern",
                        "Tie"});
#line 52
 testRunner.Then("The move results should contain the following", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Brute force AI should find winning move results for game as player X when Os firs" +
            "t move is eastern")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Behavioral")]
        public virtual void BruteForceAIShouldFindWinningMoveResultsForGameAsPlayerXWhenOsFirstMoveIsEastern()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Brute force AI should find winning move results for game as player X when Os firs" +
                    "t move is eastern", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table5.AddRow(new string[] {
                        "Center"});
            table5.AddRow(new string[] {
                        "Eastern"});
            table5.AddRow(new string[] {
                        "SouthEast"});
            table5.AddRow(new string[] {
                        "NorthWest"});
#line 61
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table5, "Given ");
#line 67
 testRunner.When("I have the AI find move results for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "MoveMade",
                        "GameStateAfterMove"});
            table6.AddRow(new string[] {
                        "Northern",
                        "Tie"});
            table6.AddRow(new string[] {
                        "NorthEast",
                        "Tie"});
            table6.AddRow(new string[] {
                        "Western",
                        "Tie"});
            table6.AddRow(new string[] {
                        "SouthWest",
                        "XWin"});
            table6.AddRow(new string[] {
                        "Southern",
                        "XWin"});
#line 68
 testRunner.Then("The move results should contain the following", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Brute force AI should find winning move results for game as player X when Os firs" +
            "t move is northern")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Behavioral")]
        public virtual void BruteForceAIShouldFindWinningMoveResultsForGameAsPlayerXWhenOsFirstMoveIsNorthern()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Brute force AI should find winning move results for game as player X when Os firs" +
                    "t move is northern", ((string[])(null)));
#line 76
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table7.AddRow(new string[] {
                        "Center"});
            table7.AddRow(new string[] {
                        "Northern"});
            table7.AddRow(new string[] {
                        "NorthWest"});
            table7.AddRow(new string[] {
                        "SouthEast"});
#line 77
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table7, "Given ");
#line 83
 testRunner.When("I have the AI find move results for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "MoveMade",
                        "GameStateAfterMove"});
            table8.AddRow(new string[] {
                        "Eastern",
                        "Tie"});
            table8.AddRow(new string[] {
                        "Western",
                        "XWin"});
            table8.AddRow(new string[] {
                        "NorthEast",
                        "Tie"});
            table8.AddRow(new string[] {
                        "SouthWest",
                        "XWin"});
            table8.AddRow(new string[] {
                        "Southern",
                        "Tie"});
#line 84
 testRunner.Then("The move results should contain the following", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Brute force AI should find winning move results for game as player X when Os firs" +
            "t move is southern")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Behavioral")]
        public virtual void BruteForceAIShouldFindWinningMoveResultsForGameAsPlayerXWhenOsFirstMoveIsSouthern()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Brute force AI should find winning move results for game as player X when Os firs" +
                    "t move is southern", ((string[])(null)));
#line 92
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table9.AddRow(new string[] {
                        "Center"});
            table9.AddRow(new string[] {
                        "Southern"});
            table9.AddRow(new string[] {
                        "SouthWest"});
            table9.AddRow(new string[] {
                        "NorthEast"});
#line 93
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table9, "Given ");
#line 99
 testRunner.When("I have the AI find move results for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "MoveMade",
                        "GameStateAfterMove"});
            table10.AddRow(new string[] {
                        "NorthWest",
                        "XWin"});
            table10.AddRow(new string[] {
                        "Northern",
                        "Tie"});
            table10.AddRow(new string[] {
                        "Eastern",
                        "Tie"});
            table10.AddRow(new string[] {
                        "Western",
                        "XWin"});
            table10.AddRow(new string[] {
                        "SouthEast",
                        "Tie"});
#line 100
 testRunner.Then("The move results should contain the following", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Brute force AI should find winning move results for game as player O when Xs two " +
            "moves are eastern and western")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Behavioral")]
        public virtual void BruteForceAIShouldFindWinningMoveResultsForGameAsPlayerOWhenXsTwoMovesAreEasternAndWestern()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Brute force AI should find winning move results for game as player O when Xs two " +
                    "moves are eastern and western", ((string[])(null)));
#line 108
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table11.AddRow(new string[] {
                        "Western"});
            table11.AddRow(new string[] {
                        "Center"});
            table11.AddRow(new string[] {
                        "Eastern"});
#line 109
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table11, "Given ");
#line 114
 testRunner.When("I have the AI find move results for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "MoveMade",
                        "GameStateAfterMove"});
            table12.AddRow(new string[] {
                        "NorthWest",
                        "OWin"});
            table12.AddRow(new string[] {
                        "Northern",
                        "OWin"});
            table12.AddRow(new string[] {
                        "NorthEast",
                        "OWin"});
            table12.AddRow(new string[] {
                        "SouthWest",
                        "OWin"});
            table12.AddRow(new string[] {
                        "Southern",
                        "OWin"});
            table12.AddRow(new string[] {
                        "SouthEast",
                        "OWin"});
#line 115
 testRunner.Then("The move results should contain the following", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Brute force AI should find winning move results for game as player O when Xs two " +
            "moves are northern and southern")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Behavioral")]
        public virtual void BruteForceAIShouldFindWinningMoveResultsForGameAsPlayerOWhenXsTwoMovesAreNorthernAndSouthern()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Brute force AI should find winning move results for game as player O when Xs two " +
                    "moves are northern and southern", ((string[])(null)));
#line 124
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table13.AddRow(new string[] {
                        "Northern"});
            table13.AddRow(new string[] {
                        "Center"});
            table13.AddRow(new string[] {
                        "Southern"});
#line 125
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table13, "Given ");
#line 130
 testRunner.When("I have the AI find move results for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "MoveMade",
                        "GameStateAfterMove"});
            table14.AddRow(new string[] {
                        "NorthWest",
                        "OWin"});
            table14.AddRow(new string[] {
                        "NorthEast",
                        "OWin"});
            table14.AddRow(new string[] {
                        "Western",
                        "OWin"});
            table14.AddRow(new string[] {
                        "Eastern",
                        "OWin"});
            table14.AddRow(new string[] {
                        "SouthWest",
                        "OWin"});
            table14.AddRow(new string[] {
                        "SouthEast",
                        "OWin"});
#line 131
 testRunner.Then("The move results should contain the following", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Brute force AI should throw exception when making move is game is already over")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Behavioral")]
        public virtual void BruteForceAIShouldThrowExceptionWhenMakingMoveIsGameIsAlreadyOver()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Brute force AI should throw exception when making move is game is already over", ((string[])(null)));
#line 140
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table15.AddRow(new string[] {
                        "Northern"});
            table15.AddRow(new string[] {
                        "Eastern"});
            table15.AddRow(new string[] {
                        "Center"});
            table15.AddRow(new string[] {
                        "Western"});
            table15.AddRow(new string[] {
                        "Southern"});
#line 141
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table15, "Given ");
#line 148
 testRunner.Given("I expect an exception to be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 149
 testRunner.When("I have the AI make the next random best move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table16.AddRow(new string[] {
                        "Unable to make a move because the game is over."});
#line 150
 testRunner.Then("I expect the following GameException to be thrown", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void BruteForceAIShouldMakeNextRandomBestMoveAvailable(string testName, string initialMoves, string expectedMoves, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Brute force AI should make next random best move available", exampleTags);
#line 154
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 155
 testRunner.Given(string.Format("I start a new game with the following moves \'{0}\'", initialMoves), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 156
 testRunner.When("I have the AI make the next random best move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 157
 testRunner.Then(string.Format("The last move made should be one of the following moves \'{0}\'", expectedMoves), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Brute force AI should make next random best move available: for X when best optio" +
            "n is winning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Behavioral")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "for X when best option is winning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "for X when best option is winning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Center,Western,NorthWest,SouthEast")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "Northern,NorthEast")]
        public virtual void BruteForceAIShouldMakeNextRandomBestMoveAvailable_ForXWhenBestOptionIsWinning()
        {
#line 154
this.BruteForceAIShouldMakeNextRandomBestMoveAvailable("for X when best option is winning", "Center,Western,NorthWest,SouthEast", "Northern,NorthEast", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Brute force AI should make next random best move available: for X when best optio" +
            "n is tieing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Behavioral")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "for X when best option is tieing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "for X when best option is tieing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Center,NorthWest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "Northern,NorthEast,Eastern,Western,SouthEast,Southern,SouthWest")]
        public virtual void BruteForceAIShouldMakeNextRandomBestMoveAvailable_ForXWhenBestOptionIsTieing()
        {
#line 154
this.BruteForceAIShouldMakeNextRandomBestMoveAvailable("for X when best option is tieing", "Center,NorthWest", "Northern,NorthEast,Eastern,Western,SouthEast,Southern,SouthWest", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Brute force AI should make next random best move available: for X when best optio" +
            "n is losing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Behavioral")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "for X when best option is losing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "for X when best option is losing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Western,Center,Eastern,Northern")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "NorthWest,NorthEast,SouthEast,Southern,SouthWest")]
        public virtual void BruteForceAIShouldMakeNextRandomBestMoveAvailable_ForXWhenBestOptionIsLosing()
        {
#line 154
this.BruteForceAIShouldMakeNextRandomBestMoveAvailable("for X when best option is losing", "Western,Center,Eastern,Northern", "NorthWest,NorthEast,SouthEast,Southern,SouthWest", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Brute force AI should make next random best move available: for O when best optio" +
            "n is winning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Behavioral")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "for O when best option is winning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "for O when best option is winning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Eastern,Center,Western")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "NorthEast,Northern,NorthWest,SouthEast,Southern,SouthWest")]
        public virtual void BruteForceAIShouldMakeNextRandomBestMoveAvailable_ForOWhenBestOptionIsWinning()
        {
#line 154
this.BruteForceAIShouldMakeNextRandomBestMoveAvailable("for O when best option is winning", "Eastern,Center,Western", "NorthEast,Northern,NorthWest,SouthEast,Southern,SouthWest", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Brute force AI should make next random best move available: for O when best optio" +
            "n is tieing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Behavioral")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "for O when best option is tieing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "for O when best option is tieing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Center")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "NorthEast,NorthWest,SouthEast,SouthWest")]
        public virtual void BruteForceAIShouldMakeNextRandomBestMoveAvailable_ForOWhenBestOptionIsTieing()
        {
#line 154
this.BruteForceAIShouldMakeNextRandomBestMoveAvailable("for O when best option is tieing", "Center", "NorthEast,NorthWest,SouthEast,SouthWest", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Brute force AI should make next random best move available: for O when best optio" +
            "n is losing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Behavioral")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "for O when best option is losing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "for O when best option is losing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Center,Eastern,NorthEast")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "Northern,NorthWest,Western,SouthEast,Southern,SouthWest")]
        public virtual void BruteForceAIShouldMakeNextRandomBestMoveAvailable_ForOWhenBestOptionIsLosing()
        {
#line 154
this.BruteForceAIShouldMakeNextRandomBestMoveAvailable("for O when best option is losing", "Center,Eastern,NorthEast", "Northern,NorthWest,Western,SouthEast,Southern,SouthWest", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion

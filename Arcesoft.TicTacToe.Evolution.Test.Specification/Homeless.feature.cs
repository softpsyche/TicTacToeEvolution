// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Arcesoft.TicTacToe.Evolution.Test.Specification
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class FitnessCalculatorFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Homeless.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FitnessCalculator", "Fitness Calculator", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "FitnessCalculator")))
            {
                Arcesoft.TicTacToe.Evolution.Test.Specification.FitnessCalculatorFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("I have a mock evolution context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.Given("I have a breeder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ShouldCreateGameMatches")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FitnessCalculator")]
        public virtual void ShouldCreateGameMatches()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ShouldCreateGameMatches", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "MaximumMatchesPerIndividual",
                        "MaximumPopulationSize",
                        "MutationRate"});
            table1.AddRow(new string[] {
                        "3",
                        "6",
                        ".05"});
#line 10
 testRunner.Given("I have the following evolution settings", ((string)(null)), table1, "Given ");
#line 13
 testRunner.Given("I have a fitness calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table2.AddRow(new string[] {
                        "A"});
            table2.AddRow(new string[] {
                        "B"});
            table2.AddRow(new string[] {
                        "C"});
            table2.AddRow(new string[] {
                        "D"});
            table2.AddRow(new string[] {
                        "E"});
            table2.AddRow(new string[] {
                        "F"});
#line 14
 testRunner.Given("I have the following individuals", ((string)(null)), table2, "Given ");
#line 22
 testRunner.When("I evaluate fitness", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("The matches count should be 18", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "X",
                        "O"});
            table3.AddRow(new string[] {
                        "A",
                        "B"});
            table3.AddRow(new string[] {
                        "B",
                        "A"});
            table3.AddRow(new string[] {
                        "A",
                        "C"});
            table3.AddRow(new string[] {
                        "C",
                        "A"});
            table3.AddRow(new string[] {
                        "A",
                        "D"});
            table3.AddRow(new string[] {
                        "D",
                        "A"});
            table3.AddRow(new string[] {
                        "B",
                        "E"});
            table3.AddRow(new string[] {
                        "E",
                        "B"});
            table3.AddRow(new string[] {
                        "B",
                        "F"});
            table3.AddRow(new string[] {
                        "F",
                        "B"});
            table3.AddRow(new string[] {
                        "C",
                        "D"});
            table3.AddRow(new string[] {
                        "D",
                        "C"});
            table3.AddRow(new string[] {
                        "C",
                        "E"});
            table3.AddRow(new string[] {
                        "E",
                        "C"});
            table3.AddRow(new string[] {
                        "D",
                        "F"});
            table3.AddRow(new string[] {
                        "F",
                        "D"});
            table3.AddRow(new string[] {
                        "E",
                        "F"});
            table3.AddRow(new string[] {
                        "F",
                        "E"});
#line 24
 testRunner.Then("The matches should contain", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
